/*this file will serve as the main code for my website project which utilises javascript*/

//an array of programming languages sourced from the internet

const languages = [
  "Z++",
  "ZPL",
  "ZOPL",
  "Zig",
  "ZetaLisp",
  "Zeno",
  "Zebra, ZPL, ZPL2",
  "Z shell",
  "Z notation",
  "Yoix",
  "YQL",
  "Yorick",
  "Xtend",
  "XSLT",
  "XSharp (X#)",
  "XSB",
  "XQuery",
  "XPL0",
  "XPL",
  "Xod",
  "XOTcl",
  "Xojo",
  "XL",
  "xHarbour",
  "XMOS architecture",
  "XC",
  "XBL",
  "xBase++ (xBase plus plus)",
  "X10",
  "X++ (X plus plus/Microsoft Dynamics AX)",
  "Wyvern",
  "Wolfram",
  "Winbatch",
  "Whiley",
  "WebDNA",
  "WebAssembly",
  "WATFIV, WATFOR (WATerloo FORtran IV)",
  "Visual Prolog",
  "Visual Objects",
  "Visual LISP",
  "Visual J++ (Visual J plus plus)",
  "Visual FoxPro",
  "Visual DialogScript",
  "Visual DataFlex",
  "Viper (Ethereum/Ether (ETH))",
  "Vim script",
  "Vala",
  "UnrealScript",
  "UNITY",
  "Uniface",
  "Unicon",
  "Umple",
  "UCSD Pascal",
  "Ubercode",
  "Tynker",
  "TypeScript",
  "TXL",
  "TUTOR (PLATO Author Language)",
  "Turing",
  "TTCN (Tree and Tabular Combined Notation)",
  "Transcript (LiveCode)",
  "T-SQL (Transact-SQL)",
  "TTM",
  "Trac",
  "TPU (Text Processing Utility)",
  "Topspeed (Clarion)",
  "Toi",
  "Tom",
  "TMG (TransMo Griffer)",
  "TIE",
  "TEX (Text Executive",
  "TeX",
  "TELCOMP",
  "or and Corrector)",
  "TECO (Text",
  "Tea",
  "Tcl",
  "TAL",
  "TADS (Text Adventure Development System)",
  "TACPOL",
  "TACL",
  "SYMPL",
  "Swift",
  "Swift (Apple)",
  "SuperTalk",
  "Superplan",
  "SuperCollider",
  "SBL",
  "Subtext",
  "Stateflow",
  "Stata",
  "Strand",
  "Starlogo",
  "S/SL",
  "SR",
  "Squirrel",
  "Squeak",
  "SQR",
  "SPS",
  "SP/k",
  "SPIN",
  "Speedcode",
  "Speakeasy",
  "SPARK",
  "Source",
  "SOPHAEROS",
  "Solidity",
  "SOL",
  "Snowball",
  "SPITBOL",
  "SNOBOL",
  "Snap!",
  "Strongtalk",
  "SML",
  "Smalltalk",
  "SMALL",
  "SLIP",
  "SISAL",
  "Simulink",
  "Simula",
  "SIMSCRIPT",
  "SiMPLE",
  "SIGNAL",
  "SIMPOL",
  "Short Code",
  "SETL",
  "Serpent",
  "SequenceL",
  "SenseTalk",
  "Self",
  "Seed7",
  "Sed",
  "Script.NET",
  "Scratch",
  "Scilab",
  "Scheme",
  "Scala",
  "Sawzall",
  "Sather",
  "SASL",
  "SAS",
  "SAKO",
  "SAIL",
  "SabreTalk",
  "SA-C",
  "S-PLUS",
  "S-Lang",
  "S3",
  "S2",
  "Rust",
  "Ruby",
  "RTL/2",
  "RSL",
  "RPL",
  "RPG",
  "ROOP",
  "Ring",
  "REXX",
  "REFAL",
  "Redcode",
  "Red",
  "REBOL",
  "Reason",
  "rc",
  "Ratfor",
  "Ratfiv",
  "Rapira",
  "RAPID",
  "Raku",
  "Racket",
  "R++",
  ".QL",
  "QPL",
  "QuakeC",
  "QtScript",
  "Quantum Computation",
  "Qalb",
  "Q#",
  "Q",
  "Python",
  "PWCT",
  "PureScript",
  "Pure Data",
  "Pure",
  "Pro*C",
  "ProvideX",
  "PROTEL",
  "PROSE modeling",
  "Promela",
  "PROMAL",
  "Prolog",
  "Project Verona",
  "Prograph",
  "Processing.js",
  "Processing",
  "PPL",
  "PowerShell",
  "PowerBuilder",
  "Powerhouse",
  "POV-Ray SDL",
  "PortablE",
  "PostScript",
  "POP-2",
  "POP-11",
  "Plus",
  "PLEXIL",
  "PLEX",
  "Planner",
  "Plankalkül",
  "PLANC",
  "PL360",
  "PL/SQL",
  "PL/S",
  "PL/P",
  "PL/M",
  "PL/I",
  "PL/C",
  "PL/B",
  "PL/0",
  "PL-11",
  "Pizza",
  "Pipelines",
  "PILOT",
  "Pike",
  "Pict",
  "Picolisp",
  "Pico",
  "PHP",
  "Pharo",
  "PDL",
  "Perl",
  "PeopleCode",
  "PEARL",
  "PCF",
  "PCASTL",
  "Pascal Script",
  "Pascal",
  "PARI/GP",
  "ParaSail",
  "P′′",
  "P4",
  "Oz",
  "Oxygene",
  "Orwell",
  "Oriel",
  "ORCA/Modula-2",
  "Orc",
  "OptimJ",
  "OPS5",
  "OpenVera",
  "OpenEdge",
  "OpenCL",
  "Open",
  "Opal",
  "Opa",
  "OmniMark",
  "Octave",
  "occam-π",
  "occam",
  "OCaml",
  "Obliq",
  "Objective-J",
  "Objective-C",
  "Object Pascal",
  "Object REXX",
  "ObjectLOGO",
  "Object Lisp",
  "OBJ2",
  "Oberon",
  "Oak",
  "o:XML",
  "NXT-G",
  "NWScript",
  "Nu",
  "NSIS",
  "Not Quite C",
  "Not eXactly C",
  "NPL",
  "Nix",
  "Nim",
  "NITIN",
  "Nickle",
  "Nial",
  "NewtonScript",
  "Newspeak",
  "NEWP",
  "NewLISP",
  "NetRexx",
  "NetLogo",
  "Net.Data",
  "NESL",
  "Nemerle",
  "Neko",
  "Napier88",
  "NASM",
  "Mystic",
  "Mutan",
  "MuPAD",
  "MUMPS",
  "MSL",
  "MPD",
  "Mouse",
  "Mortran",
  "MOO",
  "Mohol",
  "Modula-3",
  "Modula-2",
  "Modula",
  "Modelica",
  "Model 204",
  "ML",
  "MIVA Script",
  "Miranda",
  "Mirah",
  "MIMIC",
  "Milk",
  "MIIS",
  "Microsoft Power Fx",
  "MicroScript",
  "Microcode",
  "MHEG-5",
  "Mesa",
  "Mercury",
  "MDL",
  "Maya (MEL)",
  "MaxScript",
  "Max",
  "Macsyma",
  "Maxima",
  "Maude system",
  "MATH-MATIC",
  "MASM Microsoft Assembly x86",
  "MATLAB",
  "Mary",
  "MARK-IV",
  "MAPPER",
  "Maple",
  "Máni",
  "Magma",
  "Magik",
  "MAD/I",
  "MAD",
  "Machine code",
  "M#",
  "M4",
  "M2001",
  "M Formula",
  "Lynx",
  "LYaPAS",
  "Lustre",
  "Lucid",
  "Lua",
  "LiveScript",
  "LiveCode",
  "LSL",
  "LSE",
  "LPC",
  "LotusScript",
  "Logtalk",
  "Logo",
  "LLL",
  "Little b",
  "Lithe",
  "Lite-C",
  "Lisp",
  "Language H",
  "LISA",
  "LIS",
  "LINQ",
  "Lingo",
  "LINC",
  "Limnor",
  "Limbo",
  "LilyPond",
  "LIL",
  "Lexico",
  "Legoscript",
  "Lean",
  "LC-3",
  "Lava",
  "Lasso",
  "LANSA",
  "Ladder",
  "LabVIEW",
  "Kv (Kivy)",
  "Kodu",
  "KornShell (ksh)",
  "KRYPTON",
  "KUKA Robot",
  "KRL",
  "KRC",
  "Kotlin",
  "Kojo",
  "KIF (Knowledge Interchange Format)",
  "Klerer-May System",
  "Kixtart",
  "KEE",
  "Karel",
  "Kaleidoscope",
  "Jython",
  "Julia",
  "JScript .NET",
  "JScript",
  "Joy",
  "JOVIAL",
  "Joule",
  "JOSS",
  "Join Java",
  "JEAN",
  "JCL",
  "Jess",
  "JavaScript",
  "JavaFX Script",
  "Java",
  "JASS",
  "Janus (time-reversible computing",
  "Janus (concurrent constraint",
  "JAL",
  "Jai",
  "JADE",
  "J++ (J plus plus)",
  "J# (J sharp)",
  "ISLISP",
  "Inform",
  "Idris",
  "IDL",
  "IBM RPG",
  "IBM Informix-4GL",
  "IBM HAScript",
  "IBM Basic assembly",
  "Icon",
  "Io",
  "HyperTalk",
  "Hume",
  "Hope",
  "Hopscotch",
  "Hop",
  "HolyC (TempleOS)",
  "Hollywood",
  "HLSL",
  "High Level Assembly (HLA)",
  "Hermes",
  "Haxe",
  "Haskell",
  "Hartmann pipelines",
  "Harbour",
  "Hamilton C shell",
  "Halide",
  "HAL/S",
  "HAGGIS",
  "Hack",
  "Groovy (Apache Groovy)",
  "Grasshopper",
  "GRASS",
  "GraphTalk (Computer Sciences Corporation)",
  "GPSS (General Purpose Simulation System)",
  "GOTRAN (IBM 1620)",
  "Gosu",
  "Google Apps Script",
  "GOM (Good Old Mad)",
  "Golo",
  "Gödel",
  "GOAL (Game Oriented Assembly Lisp)",
  "Go!",
  "Go",
  "GNU Guile",
  "GNU E",
  "GLSL (OpenGL Shading Language)",
  "GEORGE",
  "GDL (Geometric Description Language)",
  "Genie",
  "GDScript (Godot)",
  "G-code",
  "GAP",
  "GAMS (General Algebraic Modeling System)",
  "GameMonkey Script",
  "Scripting",
  "Game Maker",
  "F-Script",
  "Futhark",
  "Franz Lisp",
  "FoxBase/FoxPro",
  "FP",
  "Fortress",
  "Fortran",
  "Forth",
  "@Formula",
  "FORMAC (FORMula MAnipulation Compiler)",
  "FOIL",
  "FOCUS",
  "FOCAL (Formulating On-Line Calculations)",
  "FLOW-MATIC (B0)",
  "FlooP",
  "Flix",
  "Flex",
  "Flavors",
  "FlagShip",
  "FL",
  "Fjölnir",
  "fish",
  "FFP",
  "FAUST",
  "Fantom",
  "Factor",
  "F*",
  "F# (F sharp)",
  "Ezhil",
  "Executable UML",
  "EXEC 2",
  "CMS EXEC",
  "EusLisp Robot",
  "Euphoria",
  "Euler",
  "Euclid",
  "Etoys",
  "Esterel",
  "ESPOL",
  "Escher",
  "es",
  "Erlang",
  "EPL (Easy",
  "Epigram",
  "Emerald",
  "Emacs Lisp",
  "Elm",
  "Elixir",
  "ELAN",
  "Eiffel",
  "EGL",
  "Edinburgh IMP",
  "ECMAScript",
  "eC",
  "EASYTRIEVE PLUS",
  "Easy PL/I",
  "Ease",
  "DAX (Data Analysis Expressions)",
  "DYNAMO",
  "Dylan",
  "DRAKON",
  "Draco",
  "Dog",
  "DIBOL",
  "DinkC",
  "Delphi",
  "DCL (DIGITAL Command Language)",
  "dc",
  "dBase",
  "DATATRIEVE",
  "Datalog",
  "DataFlex",
  "Darwin",
  "Dart",
  "CEEMAC",
  "Cython",
  "Cypher Query",
  "Cyclone",
  "Cybil",
  "Curry",
  "Curl",
  "Cuneiform",
  "Csound",
  "Crystal",
  "Cryptol",
  "CPL",
  "COWSEL",
  "CorVision",
  "Coral 66",
  "Coq",
  "Cool",
  "COMTRAN",
  "Constraint Handling Rules",
  "Component Pascal",
  "COMPASS",
  "Common Lisp",
  "Common Intermediate",
  "COMIT",
  "COMAL",
  "ColdFusion",
  "CoffeeScript",
  "Cobra",
  "CobolScript",
  "COBOL",
  "CMS-2",
  "CLU",
  "Clojure",
  "CLIST",
  "CLIPS",
  "Clipper",
  "Clean",
  "Clarion",
  "Claire",
  "Control",
  "Cilk (also Cilk++ and Cilk plus)",
  "ChucK",
  "CHIP-8",
  "CHILL",
  "Charm",
  "Chapel (Cascade High Productivity Language)",
  "Ch",
  "Cg (High-Level Shader/Shading Language [HLSL])",
  "CFEngine",
  "Ceylon",
  "Céu",
  "CESIL",
  "Cecil",
  "CDuce",
  "Cayenne (Lennart Augustsson)",
  "Caml",
  "C Shell (csh)",
  "Caché ObjectScript",
  "C/AL",
  "C#",
  "C*",
  "C++",
  "C--",
  "Bosque",
  "Boomerang",
  "Boo",
  "BlooP",
  "Blockly",
  "BLISS",
  "BETA",
  "Bertrand",
  "BeanShell",
  "BCPL",
  "bc (basic calculator)",
  "Batch file (Windows/MS-DOS)",
  "Bash",
  "Ballerina",
  "Babbage",
  "Axum",
  "AWK",
  "Averest",
  "AutoLISP / Visual LISP",
  "AutoIt",
  "AutoHotkey",
  "Assembly language (ASM)",
  "Argus",
  "ARexx",
  "Arc",
  "APT",
  "AppleScript",
  "App Inventor for Android's visual block language (MIT App Inventor)",
  "APL",
  "Apex (Salesforce.com, Inc)",
  "Apache Pig latin",
  "AngelScript",
  "Analitik",
  "AMPL",
  "AMOS (AMOS BASIC)",
  "Amiga E",
  "AmbientTalk",
  "Alma-0",
  "Alice (Alice ML)",
  "ALGOL W",
  "ALGOL 68",
  "ALGOL 60",
  "ALGOL 58",
  "ALF",
  "Alef",
  "Aldor",
  "AIMMS",
  "Agora",
  "Agilent VEE (Keysight VEE)",
  "Agda",
  "AdvPL",
  "Adenine (Haystack)",
  "Ada",
  "Actor",
  "ActionScript",
  "Action!",
  "Ace DASL (Distributed Application Specification Language)",
  "Accent (Rational Synergy)",
  "ACC",
  "ABC ALGOL",
  "ABC",
  "ABAP",
  "A+ (A plus)",
  "A-0 System",
  "A.NET (A#/A sharp)",
];

//an array of difficulty levels which will be randomised later

const levels = [
  "Very Easy",
  "Easy",
  "Tricky",
  "Challenging",
  "Hard",
  "Very Hard",
  "Incredibly Hard",
];

const number = Math.floor(Math.random() * languages.length); //generate a random number from 0 to end item in array

const number2 = Math.floor(Math.random() * levels.length);

//define empty variables to use later

let generatedDifficulty = "";
let generatedLanguage = "";

/* FUNCTIONS */

//this function below uses the number variable as a randomized index within the languages array

function randomLang() {
  const spans = document.getElementsByClassName("language");
  for (const span of spans) {
    span.innerHTML = languages[number].toUpperCase();
  }
  generatedLanguage = languages[number].toUpperCase();

  console.log(
    `The random index for the languages array is (${number} / ${languages.length})`
  );
  localStorage.setItem(`SavedLang:`, JSON.stringify(generatedLanguage));
}

const difficultyLevel = document.getElementById("estimate");

function randomLevel() {
  console.log(
    `The random index for the levels array is (${number2} / ${levels.length})`
  );
  generatedDifficulty = levels[number2];
  return (difficultyLevel.innerHTML = levels[number2]);
}

//call the randomLang and randomLevel functions straight away

randomLang();
randomLevel();

//switch over the different values in the levels array
const discoverHeading = document.getElementById("discoverHeading");
const body = document.body.style;
const viewAll = document.getElementById("viewAll");
const allLangs = document.getElementById("allLangs");
const theSpan = document.getElementById("theStatus");
const theH1 = document.getElementById("titleOfPage");
const tText = document.getElementById('tipText');




viewAll.addEventListener("click", function () {


  // Clear existing content
  allLangs.innerHTML = "";

  allLangs.innerHTML +=
    "<h3>Click the button that opened this to close this section</h3>";

  if (allLangs.style.display === "block") {
    allLangs.style.display = "none"; // Close the div
    return;
  }

  allLangs.style.display = "block";
  window.alert("This may take a few seconds...");

  for (let i = 0; i < languages.length; i++) {
    //define in the loop's scope to generate a random number each iteration
    const number3 = Math.floor(Math.random() * 50);
    let status = "";

    if (number3 === 50) {
      status = "Complete!";
    } else if (number3 >= 40) {
      status = "Almost complete";
    } else if (number3 === 0) {
      status = "Not started";
    } else {
      //  theSpan.style.color = "red";
      status = "Unfinished";
    }
    allLangs.innerHTML += `${[i + 1]}) <span title='${
      languages[i]
    } is a programming language according to our sources!' id='languageIteration'>${
      languages[i]
    }</span> [Done modules <b>${number3}</b> out of <i>50</i>] | Status: (<span>${status}</span>)<br>`;
  }
  languages.forEach((lang) => {
    console.log(`${lang} programming`);
  });
});

switch (generatedDifficulty) {
  case "Very Easy":
    difficultyLevel.style.color = "darkgreen";
    //discoverHeading.innerHTML += "TEST";
    break;
  case "Easy":
    difficultyLevel.style.color = "green";
    break;
  case "Tricky":
    difficultyLevel.style.color = "darkorange";
    //discoverHeading.innerHTML += "TEST";
    break;
  case "Challenging":
    difficultyLevel.style.color = "darkorange";
    //discoverHeading.innerHTML += "TEST";
    break;
  case "Hard":
    difficultyLevel.style.color = "darkred";
    difficultyLevel.style.display = "block";
    difficultyLevel.style.lineHeight = "3em";
    difficultyLevel.style.textDecoration = "underline";
    difficultyLevel.style.textTransform = "uppercase";
    difficultyLevel.style.fontSize = "16pt";

    break;
  case "Very Hard":
    difficultyLevel.style.color = "red";
    difficultyLevel.style.display = "block";
    difficultyLevel.style.lineHeight = "3em";
    difficultyLevel.style.textDecoration = "underline";
    difficultyLevel.style.textTransform = "uppercase";
    difficultyLevel.style.fontSize = "16pt";
    break;
  case "Incredibly Hard":
    difficultyLevel.style.color = "red";
    difficultyLevel.style.display = "block";
    difficultyLevel.style.lineHeight = "3em";
    difficultyLevel.style.textDecoration = "underline";
  
    difficultyLevel.style.textTransform = "uppercase";
    difficultyLevel.style.fontFamily = "Impact";
    difficultyLevel.style.fontSize = "20pt";
    body.backgroundColor = "darkred";
    theH1.style.color = "white";
  
    break;
}


//return the stored value in the generatedlanguage variable in the span id of theLang
document.getElementById("theLang").innerHTML = generatedLanguage;

const generatedLink = document.getElementById("generatedLink");

//append the generated language value to the href attribute
generatedLink.href += encodeURIComponent(
  `${generatedLanguage.toLowerCase()} programming language `
);

//set a target blank attribute to open in a new tab
generatedLink.setAttribute("target", "_blank");
